describe("Ship", function() {
  var system = new FlightPlanner.SolarSystem()
  var sun = system.sun, kerbin = system.kerbin, duna = system.duna, ship

  beforeEach(function() {
    sun.addChild(kerbin)
    sun.addChild(duna)
  })

  it("can change modes", function() {
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 0, { r: 7e5, phi: 0 }, 0, 0)
    ship.setParent(kerbin)
    ship.v = ship.getSystemMu().times(new Decimal(2).dividedBy(ship.pos.r).minus(new Decimal(1).dividedBy(ship.pos.r))).sqrt()
    expect(ship.getSemiMajorAxis().toNumber()).toEqual(7e5)
    ship.setMotionCalculator(FlightPlanner.Model.MomentumBody)
    ship.a = new Decimal(8e5)
    expect(ship.getSemiMajorAxis().toNumber()).toEqual(8e5)
    ship.setMotionCalculator(FlightPlanner.Model.AcceleratingBody)
    expect(ship.getSemiMajorAxis().toNumber()).toEqual(7e5)
  })

  it("should copy over the appropriate paremeters when calculation modes change", function() {
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 0, { r: 7e5, phi: 0 }, 0, 0)
    ship.setParent(kerbin)
    ship.setThrottle(1, 0)
    ship.v = ship.getSystemMu().times(new Decimal(2).dividedBy(ship.pos.r).minus(new Decimal(1).dividedBy(ship.pos.r))).sqrt()
    expect(ship.getSemiMajorAxis().toNumber()).toEqual(7e5)
    ship.setThrottle(0, 0)
    expect(ship.a.toNumber()).toEqual(7e5)
  })

  it("should not flip the neg/pos sign for true anomaly", function() {
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 0, { r: new Decimal(21386792525.273233165), phi: 2.5090367501324917 }, 0, 0)
    ship.setParent(sun)
    ship.setMaxAcceleration(0.2)
    ship.setThrottle(1, 0)
    ship.v = new Decimal(6853.4337390285327712)
    ship.setCartesianPrograde(1.8866051129692694)
    var t = new Decimal(19128892)
    expect(ship.getTrueAnomaly()).toBeGreaterThan(0)
    ship.step(t, 64)
    expect(ship.getTrueAnomaly()).toBeGreaterThan(0)
  })

  it("should not flip the neg/pos sign for true anomaly", function() {
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 0, { r: new Decimal(21464775034.069883602), phi: 2.503885507952059 }, 0, 0)
    ship.setParent(sun)
    ship.setMaxAcceleration(0.2)
    var t = new Decimal(19152060)
    ship.setThrottle(1, t)
    ship.v = new Decimal(5635.6267178618410972)
    ship.setCartesianPrograde(1.1384462632763914)
    ship.updateInitialMeanAnomaly()
    expect(ship.getTrueAnomaly(t)).toBeGreaterThan(0)
    var m = ship.getMeanAnomaly(t)
    ship.setThrottle(0, t)
    expect(ship.m).toBeCloseTo(FlightPlanner.Helper.Helper.clampRadians(m.minus(ship.getMeanMotion().times(t))))
    expect(ship.getMeanAnomaly(t)).toBeCloseTo(m)
    ship.step(t, 64)
    expect(ship.getTrueAnomaly(t.plus(64))).toBeGreaterThan(0)
  })

  it("switches to a parent SOI", function() {
    var t = new Decimal(18752444)
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 4317.094987320448, { r: new Decimal(84211451.1923179), phi: 2.5565173563431127 }, 1.5608351940917529, 0, false)
    ship.setParent(kerbin)
    ship.setMaxAcceleration(0.2)
    ship.setThrottle(1, t)
    expect(ship.getParent().name).toEqual(kerbin.name)
    kerbin.step(t, 64)
    ship.step(t, 64)
    expect(ship.getDistanceFromParent()).toBeGreaterThan(kerbin.getDistanceFromParent(t))
    expect(ship.getDistanceFromParent()).toBeLessThan(kerbin.getDistanceFromParent(t).plus(kerbin.soi * 2))
    expect(ship.getParent().name).toEqual(sun.name)
    expect(ship.getVelocity()).toBeGreaterThan(13000)
    expect(ship.getVelocity()).toBeLessThan(14000)
  })

  it("switches to a child SOI", function() {
    var t = new Decimal(19175036)
    ship = new FlightPlanner.Model.Ship('Test Ship', 50, 5418.807274528309, { r: new Decimal(21488118862.900898), phi: 2.4983151614229295 }, 1.1210183171389723, 1.1210183171389723, false)
    ship.setParent(sun)
    ship.setMaxAcceleration(0.2)
    ship.setThrottle(0, t)
    ship.setInitMeanAnomaly(0.05627068185446937)
    ship.a = new Decimal(14699906189.361296)
    ship.e = new Decimal(0.49227864852771797)
    expect(ship.getParent().name).toEqual(sun.name)
    expect(ship.pos.r.toNumber()).toEqual(21488118862.900898)
    expect(ship.pos.phi.toNumber()).toEqual(2.4983151614229295)
    expect(ship.getApoapsis().toNumber()).toEqual(21936356141.744312)
    expect(ship.getPeriapsis().toNumber()).toEqual(7463456236.978281)

    expect(ship.getMeanAnomaly(t)).toBeCloseTo(2.280, 2)
    expect(ship.getTrueAnomaly(t)).toBeCloseTo(2.85, 1)
    expect(ship.getFlightPathAngle(t).toNumber()).toBeCloseTo(0.259, 3)
    expect(ship.getCartesianPrograde(t).toNumber()).toBeCloseTo(1.1865, 3)

    expect(ship.getVelocity(t)).toBeCloseTo(5604.4, 0)
    expect(ship.getCartesianPrograde(t)).toBeCloseTo(1.1865, 3)
    duna.step(t.plus(64), 64)
    ship.step(t.plus(64), 64)
    expect(ship.getParent().name).toEqual(duna.name)
    expect(ship.getVelocity(t)).toBeCloseTo(2180.9, 0)
    expect(ship.getCartesianPrograde(t)).toBeCloseTo(3.570, 3)
    duna.step(t.plus(128), 64)
    ship.step(t.plus(128), 64)
    expect(ship.getVelocity(t)).toBeCloseTo(2168.10, 0)
    expect(ship.getCartesianPrograde(t)).toBeCloseTo(3.570, 3)
    expect(ship.getParent().name).toEqual(duna.name)
  })
})
